// ManTracking.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include "opencv2/opencv.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <iostream>
#include "opencv2/videoio/videoio.hpp"
#include <opencv2/imgproc/imgproc_c.h>
#include <opencv2/features2d/features2d.hpp>
#include "ml.h"
#include <vector>
#include <string>
#include <sstream>
#include <fstream>
#include "tracking\tracking.hpp"

using namespace cv;
using namespace std;
VideoCapture cap("C:/Users/SAL/Videos/TownCentreXVID.avi");
int a = 0;
const int Rows = 71459;
const int Cols = 12;
const int PersonNumber = 0, FrameNumberG = 1, HeadValid = 2, BodyValid = 3, HeadLeft = 4, 
HeadTop = 5, HeadRight = 6, HeadBottom = 7, BodyLeft = 8, BodyTop = 9, BodyRight = 10, BodyBottom = 11;


Mat frame;
Mat FrameCanny;
Mat FrameHSV;
Mat FrameHog;
double FrameNumber = 1;
int CurrentFrame = 0;
int TotalFrame = cap.get(CV_CAP_PROP_FRAME_COUNT);

vector<double> RowVector(Cols, 99);
vector<vector<double> > DataVector(Rows, RowVector);

vector<double> PersonRowVector(11, 99);

vector<vector<double> > Person0Vector(Rows, PersonRowVector);
vector<Rect> Found, FoundFiltered, GroundTruth, HogRects;
vector<int> HogFrameCount, GroundTruthFrameCount;
int RowNumber=0;


ifstream file("C:\\opencv\\groundtruth.txt");
string CSVLine;
string value;
double DoubleValue;
int Person0 = 0;
int Person1 = 1;
int n = 0;



int main(int argc, char* argv[])
{
	HOGDescriptor hog;
	hog.setSVMDetector(HOGDescriptor::getDefaultPeopleDetector());
	cout << "reading ground truth CSV" << endl;
	///////////////////read csv////////////////////////
	for (int row = 0; row < Rows; ++row){
		//gets the csv line by line and stores as a string
		getline(file, CSVLine);
		//converts the line into stringstream - whatever that means
		istringstream iss(CSVLine);

		for (int col = 0; col < Cols; ++col){
			//gets each value from the line seperated by a comma
			getline(iss, value, ',');
			//converts each value from string to double
			DoubleValue = stod(value);
			//assigns each value to appropriate array position
			DataVector[row][col] = DoubleValue;
			//prints array
			//cout << DataVector[row][col] << " ";
		}

		
	}
	///////save GRound truth rects to csv//////
	ofstream GTFile("Ground_Truth.xls");

	for (int row1 = 0; row1 < Rows; ++row1){
		GroundTruth.push_back(Rect(Point(DataVector[row1][BodyLeft], DataVector[row1][BodyTop]), Point(DataVector[row1][BodyRight], DataVector[row1][BodyBottom])));

		GTFile << GroundTruth[row1]<<"\t"<<DataVector[row1][FrameNumberG] << endl;
	}
	GTFile.close();
	cout << "finished reading CSV" << endl;

//////////////video cap///////////////////////////////
	
	//namedWindow("video", CV_WINDOW_AUTOSIZE);
	//namedWindow("Hog Video", CV_WINDOW_AUTOSIZE);
	

	

	while (CurrentFrame !=TotalFrame){
	
		cap >> FrameHog;
		CurrentFrame = cap.get(CV_CAP_PROP_POS_FRAMES);

		//frame = cap.get(CV_CAP_PROP_FRAME_COUNT);
		//FrameNumber = cap.get(CV_CAP_PROP_POS_FRAMES);
		//cvtColor(frame, frame, COLOR_BGR2HSV);
		
		//cout << frame.rows <<" "<<frame.cols <<'\r';
		
		
		//get hog rectangles and put them into the found vector
		hog.detectMultiScale(FrameHog, Found, 0, Size(8, 8), Size(32, 32), 1.05, 2);
		
		//gets all hog rectangles and pastes them onto FrameHog
		/*for (size_t i = 0; i < Found.size(); i++){
			rectangle(FrameHog, Found[i], 10, 1, 8, 0);
		}*/
		
		//gets all the ground truth rectangles into GroundTruth vector
		
		for (size_t i = 0; i < Found.size(); ++i){
			HogRects.push_back(Found[i]);
			HogFrameCount.push_back(CurrentFrame);
			//HogFile << HogRects[i] << endl;
		}

	
		

		/*size_t i, j;
		for (i = 0; i < Found.size(); i++){
			Rect r = Found[i];
			for (j = 0; j < Found.size(); j++)
				if (j != i && (r & Found[j]) == r)
					break;
				if (j == Found.size())
					FoundFiltered.push_back(r);
			}
			
		for (i = 0; i < FoundFiltered.size();i++){
			Rect r = FoundFiltered[i];
			r.x += cvRound(r.width*0.1);
			r.width = cvRound(r.width*0.1);
			r.y += cvRound(r.height * 0.07);
			r.height = cvRound(r.height * 0.8);
			rectangle(FrameHog, r.tl(), r.br(), Scalar(0, 255, 0), 3);
		}
		*/

		/*while ((int)FrameNumber == (int) DataVector[RowNumber][FrameNumberG]+1){

			
			rectangle(frame, Point(DataVector[RowNumber][BodyLeft], DataVector[RowNumber][BodyTop]), Point(DataVector[RowNumber][BodyRight], DataVector[RowNumber][BodyBottom]), 1, 1);
			rectangle(frame, Point(DataVector[RowNumber][HeadLeft], DataVector[RowNumber][HeadTop]), Point(DataVector[RowNumber][HeadRight], DataVector[RowNumber][HeadBottom]), 4, 4);

			++RowNumber;
		
		}*/
		
		//imshow("video", frame);
	/*imshow("Hog Video", FrameHog);
		waitKey(30);
		//if (waitKey(10) >= 0)
			//break;
		*/
		
		int PercentComplete = (CurrentFrame / TotalFrame)*100.00;
		
		cout<< "total frame: "<< TotalFrame <<"	current frame: " << CurrentFrame <<"	"<< PercentComplete << " % complete\r";
		
	}
	ofstream HogFile("Hog_Rect.xls");
	for (size_t i = 0; i < HogRects.size(); ++i){
		HogFile << HogRects[i]<<"\t"<<HogFrameCount[i]<<endl;
	}
	HogFile.close();
	return 0;
}

